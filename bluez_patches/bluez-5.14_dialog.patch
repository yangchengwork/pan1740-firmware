diff --git a/Makefile.tools b/Makefile.tools
index 7548dca..266205f 100644
--- a/Makefile.tools
+++ b/Makefile.tools
@@ -154,7 +154,8 @@ tools_hciattach_SOURCES = tools/hciattach.c tools/hciattach.h \
 						tools/hciattach_tialt.c \
 						tools/hciattach_ath3k.c \
 						tools/hciattach_qualcomm.c \
-						tools/hciattach_intel.c
+						tools/hciattach_intel.c \
+						tools/hciattach_dialog.c
 tools_hciattach_LDADD = lib/libbluetooth-internal.la
 
 tools_hciconfig_SOURCES = tools/hciconfig.c tools/csr.h tools/csr.c
diff --git a/tools/hciattach.c b/tools/hciattach.c
index db01b85..e8d1f08 100644
--- a/tools/hciattach.c
+++ b/tools/hciattach.c
@@ -322,6 +322,11 @@ static int qualcomm(int fd, struct uart_t *u, struct termios *ti)
 	return qualcomm_init(fd, u->speed, ti, u->bdaddr);
 }
 
+static int dialog(int fd, struct uart_t *u, struct termios *ti)
+{
+	return dialog_init(fd, u->speed, ti, u->bdaddr);
+}
+
 static int intel(int fd, struct uart_t *u, struct termios *ti)
 {
 	return intel_init(fd, u->init_speed, &u->speed, ti);
@@ -1142,6 +1147,10 @@ struct uart_t uart[] = {
 	{ "qualcomm",   0x0000, 0x0000, HCI_UART_H4,   115200, 115200,
 			FLOW_CTL, DISABLE_PM, NULL, qualcomm, NULL },
 
+	/* Dialog DA14580 */
+	{ "dialog",   0x0000, 0x0000, HCI_UART_H4,   57600, 115200,
+			0, DISABLE_PM, NULL, dialog, NULL },
+
 	/* Intel Bluetooth Module */
 	{ "intel",      0x0000, 0x0000, HCI_UART_H4,   115200, 115200,
 			FLOW_CTL, DISABLE_PM, NULL, intel, NULL },
diff --git a/tools/hciattach.h b/tools/hciattach.h
index 1b23ad7..a44672c 100644
--- a/tools/hciattach.h
+++ b/tools/hciattach.h
@@ -57,3 +57,4 @@ int ath3k_init(int fd, int speed, int init_speed, char *bdaddr,
 int ath3k_post(int fd, int pm);
 int qualcomm_init(int fd, int speed, struct termios *ti, const char *bdaddr);
 int intel_init(int fd, int init_speed, int *speed, struct termios *ti);
+int dialog_init(int fd, int speed, struct termios *ti, const char *bdaddr);
diff --git a/tools/hciattach_dialog.c b/tools/hciattach_dialog.c
new file mode 100644
index 0000000..95bc90b
--- /dev/null
+++ b/tools/hciattach_dialog.c
@@ -0,0 +1,362 @@
+/*
+ *
+ *  BlueZ - Bluetooth protocol stack for Linux
+ *
+ *  Copyright (C) 2014 Dialog Semiconductor GmbH. All rights reserved.
+ *
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/param.h>
+#include <sys/ioctl.h>
+#include <time.h>
+
+#include <bluetooth/bluetooth.h>
+#include <bluetooth/hci.h>
+#include <bluetooth/hci_lib.h>
+
+#include "hciattach.h"
+
+
+#define STX		0x02
+#define SOH		0x01
+#define ACK		0x06
+#define NACK		0x15
+#define CRC_INIT	0x00
+
+
+static void dbg_print_response(char *response, int size)
+{
+	int i;
+	for (i = 0; i < size;++i)
+	{
+		if (i % 10 == 0)
+			printf("\n");
+
+		printf("0x%02x ", response[i]);
+	}
+}
+
+static int dialog_hci_custom_command_call(int fd, char cmd_1, char cmd_2) {
+	struct timespec tm = { 0, 50000 };
+	char cmd[5];
+	unsigned char resp[100]; /* Response */
+	char fw[100];
+	int n;
+
+	memset(resp, 0, 100);
+
+	/* Get Manufacturer and LMP version */
+	cmd[0] = HCI_COMMAND_PKT;
+	cmd[1] = cmd_2;
+	cmd[2] = cmd_1;
+	cmd[3] = 0x00;
+
+	do {
+		n = write(fd, cmd, 4);
+		if (n < 4) {
+			fprintf(stderr,"Failed to write command 0x%02x%02x",
+					cmd_1, cmd_2);
+			return -1;
+		}
+
+		/* Read reply. */
+		if (read_hci_event(fd, resp, 100) < 0) {
+			perror("Failed to read response");
+			return -1;
+		}
+
+		/* Wait for command complete event for our Opcode */
+		printf( "resp: %02x %02x\n", resp[4], resp[5] ) ;
+	} while (resp[4] != cmd[1] && resp[5] != cmd[2]);
+
+	return 0;
+}
+
+static int safe_write(int fd, const void* buf, size_t len)
+{
+	ssize_t n;
+
+	do {
+		n = write(fd, buf, len);
+		if (n > 0) {
+			len -= n;
+			buf += n;
+		} else if (n < 0  &&  errno != EINTR)
+			return -1;
+	} while (len);
+
+	return 0;
+}
+
+static int send_file(int ser_fd, int file_fd, int file_size, uint8_t* file_crc)
+{
+	uint8_t fcrc = CRC_INIT;
+	int n, pos;
+
+	for (pos = 0; pos < file_size; ) {
+#define FBUF_SIZE 4096
+		uint8_t buf[FBUF_SIZE];
+		int i, count;
+
+		/* read a chunk */
+		count = file_size - pos;
+		if (count > FBUF_SIZE)
+			count = FBUF_SIZE;
+		n = read(file_fd, buf, count);
+		if (-1 == n) {
+			if (errno != EINTR) {
+				perror("reading from file");
+				return -1;
+			} else
+				continue;
+		}
+
+		/* update crc */
+		for (i = 0; i < n; i++)
+			fcrc ^= buf[i];
+
+		/* write chunk */
+		if (safe_write(ser_fd, buf, n) < 0) {
+			perror("writing to serial port");
+			return -1;
+		}
+
+		pos += n;
+	}
+
+	*file_crc = fcrc;
+	return 0;
+}
+
+static int dialog_download_hci_firmware(int fd)
+{
+	struct stat sbuf;
+	const char fw_fname[] = "hci-firmware.bin";
+	int cnt = 0, fw = -1, fw_size, res = -1, done = 0, download_state = 0;
+	int read_from_serial = 1;
+
+	/* open firmware file and get its size */
+	fw = open(fw_fname, O_RDONLY);
+	if (-1 == fw) {
+		perror(fw_fname);
+		exit(EXIT_FAILURE);
+	}
+	if (fstat(fw, &sbuf)) {
+		perror(fw_fname);
+		goto cleanup_and_exit;
+	}
+	fw_size = sbuf.st_size;
+
+	printf("Downloading %s...\n", fw_fname);
+	while (!done) {
+		uint8_t b, fw_crc;
+
+		if (read_from_serial && read(fd, &b, 1) < 0) {
+			perror("Reading from serial port");
+			goto cleanup_and_exit;
+		}
+
+		switch (download_state)
+		{
+			case 0:
+				if (STX == b) {
+					uint8_t buf[3];
+
+					buf[0] = SOH;
+					buf[1] = fw_size;
+					buf[2] = (fw_size >> 8);
+					if (safe_write(fd, buf, 3)) {
+						perror("responding to STX");
+						goto cleanup_and_exit;
+					}
+					download_state = 1;
+				}
+				break ;
+
+			case 1:
+				if (ACK == b) {
+					download_state = 2;
+					read_from_serial = 0;
+				} else if (NACK == b) {
+					fprintf(stderr, "Received NACK.\n");
+					done = 1;
+				} else {
+					fprintf(stderr, "Received %02x while "
+							"expecting ACK (%02x) "
+							"or NACK (%02x).\n",
+							b, ACK, NACK);
+					if (++cnt == 10) {
+						printf("Restarting.\n");
+						download_state = 0;
+						cnt = 0;
+					}
+				}
+				break ;
+
+			case 2:
+				read_from_serial = 1;
+				if (send_file(fd, fw, fw_size, &fw_crc))
+					goto cleanup_and_exit;
+				download_state = 3;
+				break;
+
+			case 3:
+				if (fw_crc != b) {
+					fprintf(stderr, "Received CRC %02x, "
+							"which does not match "
+							"computed CRC %02x.\n",
+							b, fw_crc);
+				} else {
+					printf("CRC OK (%02x).\n", b);
+					b = ACK;
+					if (safe_write(fd, &b, 1) < 0) {
+						perror("sending final ACK");
+						goto cleanup_and_exit;
+					}
+				}
+				done = 1;
+				break;
+
+			default:
+				fprintf(stderr, "Unknown download_state=%d\n",
+						download_state);
+				goto cleanup_and_exit;
+		}
+	}
+
+	res = 0;
+
+cleanup_and_exit:
+	if (fw != -1) {
+		if (close(fw))
+			perror(fw_fname);
+	}
+
+	return res;
+}
+
+int dialog_init(int fd, int speed, struct termios *ti, const char *bdaddr)
+{
+	struct timespec tm = {0, 50000};
+	char cmd[5];
+	unsigned char resp[100];		/* Response */
+	char fw[100];
+	int n;
+
+	if (dialog_download_hci_firmware(fd) < 0)
+		return -1;
+
+	/* wait for HCI application to start */
+	usleep(10000);
+
+	/* enable flow control and change baud rate */
+	tcflush(fd, TCIOFLUSH);
+
+	ti->c_cflag |= CRTSCTS;
+
+	if (tcsetattr(fd, TCSANOW, ti) < 0) {
+		perror("Can't set port settings");
+		return -1;
+	}
+
+	tcflush(fd, TCIOFLUSH);
+
+	if (set_speed(fd, ti, speed) < 0) {
+		perror("Can't set baud rate");
+		return -1;
+	}
+
+	/* DIALOG RESET*/
+	printf("Sending HCI reset before starting conversation...\n");
+	dialog_hci_custom_command_call(fd, 0x0c, 0x03);
+
+	memset(resp, 0, 100);
+
+	/* Get Manufacturer and LMP version */
+	cmd[0] = HCI_COMMAND_PKT;
+	cmd[1] = 0x01;
+	cmd[2] = 0x10;
+	cmd[3] = 0x00;
+
+	do {
+		n = write(fd, cmd, 4);
+		if (n < 4) {
+			perror("Failed to write init command");
+			return -1;
+		}
+
+		/* Read reply. */
+		if (read_hci_event(fd, resp, 100) < 0) {
+			perror("Failed to read init response");
+			return -1;
+		}
+
+		/* Wait for command complete event for our Opcode */
+	} while (resp[4] != cmd[1] && resp[5] != cmd[2]);
+
+	printf("\n===============================================\n");
+
+	/* Bluetooth Core Spec*/
+	{
+		if (0x06 == resp[7])
+			printf("HCI ver: Bluetooth Core Spec 4.0 (0x%02x)\n", resp[7]);
+		else
+			printf("Bluetooth Core Version Spec version is not 4.0!");
+	}
+
+	/* Manufacturer */
+	{
+		unsigned short hci_manufacturer = resp[11] | (resp[12] << 8);
+		if (hci_manufacturer == 0x00d2)
+			printf("Manufacturer: Dialog Semiconductor "
+					"(0x%04x)\n", hci_manufacturer);
+		else
+			fprintf(stderr, "WARNING : module's manufacturer is "
+					"not Dialog Semiconductor (0x%04x)!!!\n",
+					hci_manufacturer);
+
+	}
+	/* Print HCI revision */
+	{
+		unsigned short hci_revision = resp[8] | (resp[9] << 8);
+		printf("HCI revision : 0x%04x\n", hci_revision);
+	}
+
+	/* Print LMP version */
+	printf("Module LMP version : 0x%02x\n", resp[10] & 0xFF);
+
+	/* Print LMP subversion */
+	{
+		unsigned short lmp_subv = resp[13] | (resp[14] << 8);
+
+		printf("Module LMP sub-version : 0x%04x\n", lmp_subv);
+	}
+
+	return 0;
+}
+
